class RGBAChannelPacker{#e=new Map;#t=null;#a=new Set(["image/jpeg","image/jpg","image/png","image/webp","image/gif","image/bmp"]);#n=52428800;#i=8192;constructor(){this.init()}async init(){try{this.validateBrowserSupport(),await this.setupEventListeners(),console.info("RGBA Channel Packer initialized")}catch(e){this.showNotification("Failed to initialize. Please refresh the page.","error"),console.error("Initialization error:",e)}}validateBrowserSupport(){const required={"Canvas API":()=>!!document.createElement("canvas").getContext,"File API":()=>!!(window.File&&window.FileReader&&window.FileList),"Async/Await":()=>{try{return eval("(async () => {})"),!0}catch{return!1}}},unsupported=Object.entries(required).filter((([,e])=>!e())).map((([e])=>e));if(unsupported.length>0)throw new Error(`Unsupported features: ${unsupported.join(", ")}`)}async setupEventListeners(){for(const e of document.querySelectorAll("fieldset[data-channel]")){const t=e.dataset.channel,a=e.querySelector('input[type="file"]'),n=e.querySelector("button"),i=e.querySelector('input[type="checkbox"]');a?.addEventListener("change",(e=>this.handleFileSelect(e,t))),n?.addEventListener("click",(()=>a?.click())),i?.addEventListener("change",(()=>this.updatePreview(t))),this.setupDragAndDrop(e,a)}const e=document.querySelector('button[data-action="pack"]'),t=document.querySelector('button[data-action="download"]');e?.addEventListener("click",(()=>this.packChannels())),t?.addEventListener("click",(()=>this.downloadResult())),document.querySelector("fieldset[data-config]")?.addEventListener("change",(()=>{this.updatePackButton()}))}setupDragAndDrop(e,t){let a=0;e.addEventListener("dragenter",(t=>{t.preventDefault(),a++,e.dataset.dragOver="true"})),e.addEventListener("dragleave",(t=>{t.preventDefault(),a--,0===a&&delete e.dataset.dragOver})),e.addEventListener("dragover",(e=>{e.preventDefault()})),e.addEventListener("drop",(async n=>{n.preventDefault(),a=0,delete e.dataset.dragOver;const i=Array.from(n.dataTransfer.files).find((e=>this.#a.has(e.type)));if(i){const e=new DataTransfer;e.items.add(i),t.files=e.files,t.dispatchEvent(new Event("change",{bubbles:!0}))}else this.showNotification("Please drop a valid image file","warning")}))}async handleFileSelect(e,t){const a=e.target.files?.[0];if(a)try{this.validateFile(a);const e=await this.loadImage(a);this.#e.set(t,{image:e,file:a,metadata:{size:a.size,type:a.type,dimensions:{width:e.width,height:e.height}}}),await this.updatePreview(t),this.updatePackButton();document.querySelector(`fieldset[data-channel="${t}"]`).dataset.hasImage="true"}catch(e){this.showNotification(`Failed to load image: ${e.message}`,"error"),this.clearChannel(t)}else this.clearChannel(t)}validateFile(e){if(!this.#a.has(e.type))throw new Error(`Unsupported file type: ${e.type}`);if(e.size>this.#n)throw new Error(`File too large: ${this.formatFileSize(e.size)}`)}async loadImage(e){return new Promise(((t,a)=>{const n=new FileReader,i=new Image;n.onload=e=>{i.onload=()=>{0!==i.width&&0!==i.height?i.width>this.#i||i.height>this.#i?a(new Error(`Image too large: ${i.width}×${i.height}px`)):t(i):a(new Error("Invalid image dimensions"))},i.onerror=()=>a(new Error("Failed to decode image")),i.src=e.target.result},n.onerror=()=>a(new Error("Failed to read file")),n.readAsDataURL(e)}))}async updatePreview(e){const t=document.querySelector(`fieldset[data-channel="${e}"]`),a=t?.querySelector("figure"),n=t?.querySelector('input[type="checkbox"]'),i=this.#e.get(e);if(!a||!i)return;const{image:r,file:s}=i,o=n?.checked||!1,l=document.createElement("canvas");l.width=Math.min(r.width,300),l.height=Math.min(r.height,300);const d=l.getContext("2d");if(d.drawImage(r,0,0,l.width,l.height),o){const e=d.getImageData(0,0,l.width,l.height),t=e.data;for(let e=0;e<t.length;e+=4)t[e]=255-t[e],t[e+1]=255-t[e+1],t[e+2]=255-t[e+2];d.putImageData(e,0,0)}const c=document.createElement("img");c.src=l.toDataURL("image/jpeg",.8),c.alt=`${e} channel preview`;const h=document.createElement("figcaption");h.innerHTML=`\n                    <strong>${this.escapeHtml(s.name)}</strong><br>\n                    ${r.width} × ${r.height}px • ${this.formatFileSize(s.size)}\n                    ${o?"<br><em>Inverted</em>":""}\n                `,a.innerHTML="",a.appendChild(c),a.appendChild(h)}clearChannel(e){this.#e.delete(e);const t=document.querySelector(`fieldset[data-channel="${e}"]`);if(t){delete t.dataset.hasImage;const e=t.querySelector("figure"),a=t.querySelector('input[type="checkbox"]'),n=t.querySelector('input[type="file"]');e&&(e.innerHTML=""),a&&(a.checked=!1),n&&(n.value="")}this.updatePackButton()}updatePackButton(){const e=document.querySelector('button[data-action="pack"]'),t=document.querySelector("#pack-status"),a=this.#e.size;e&&t&&(a>=2?(e.disabled=!1,t.textContent=`Ready to pack ${a} channel${a>1?"s":""}`,e.setAttribute("aria-label",`Pack ${a} channels into RGBA image`)):(e.disabled=!0,t.textContent=`Requires at least 2 images (${a}/2)`,e.setAttribute("aria-label","Pack channels (disabled - requires at least 2 images)")))}async packChannels(){if(this.#e.size<2)return void this.showNotification("At least 2 images are required","warning");const e=document.querySelector('aside[role="status"]'),t=document.querySelector("output"),a=document.querySelector('button[data-action="download"]');try{e&&(e.hidden=!1),t&&(t.innerHTML=""),a&&(a.hidden=!0);const{width:n,height:i}=this.calculateDimensions(),r=document.querySelectorAll("fieldset[data-config] select"),s=parseInt(r[0]?.value||"0"),o=parseInt(r[1]?.value||"255"),l=await this.processChannels(n,i,s,o),d=document.createElement("canvas");d.width=n,d.height=i;const c=d.getContext("2d"),h=c.createImageData(n,i),u=h.data;for(let e=0;e<u.length;e+=4){const t=e;u[e]=l.red[t],u[e+1]=l.green[t],u[e+2]=l.blue[t],u[e+3]=l.alpha[t]}c.putImageData(h,0,0),this.#t=d,this.displayResult(d),a&&(a.hidden=!1)}catch(e){this.showNotification(`Failed to pack channels: ${e.message}`,"error")}finally{e&&(e.hidden=!0)}}calculateDimensions(){const e=Array.from(this.#e.values()).map((e=>e.image));return{width:Math.max(...e.map((e=>e.width))),height:Math.max(...e.map((e=>e.height)))}}async processChannels(e,t,a,n){const i={},r=["red","green","blue","alpha"];for(const s of r)if(this.#e.has(s)){const a=document.querySelector(`fieldset[data-channel="${s}"]`),n=a?.querySelector('input[type="checkbox"]'),r=n?.checked||!1,o=(await this.resizeImage(this.#e.get(s).image,e,t,r)).getContext("2d").getImageData(0,0,e,t);i[s]=o.data}else{const r="alpha"===s?n:a;i[s]=this.createFilledChannel(e,t,r)}return i}async resizeImage(e,t,a,n=!1){const i=document.createElement("canvas");i.width=t,i.height=a;const r=i.getContext("2d"),s=t/e.width,o=a/e.height,l=Math.min(s,o),d=e.width*l,c=e.height*l,h=(t-d)/2,u=(a-c)/2;if(r.fillStyle="black",r.fillRect(0,0,t,a),r.drawImage(e,h,u,d,c),n){const e=r.getImageData(0,0,t,a),n=e.data;for(let e=0;e<n.length;e+=4)n[e]=255-n[e],n[e+1]=255-n[e+1],n[e+2]=255-n[e+2];r.putImageData(e,0,0)}return i}createFilledChannel(e,t,a){const n=e*t*4,i=new Uint8ClampedArray(n);for(let e=0;e<n;e+=4)i[e]=a,i[e+1]=a,i[e+2]=a,i[e+3]=255;return i}displayResult(e){const t=document.querySelector("output");if(!t)return;const a=Array.from(this.#e.keys()),n=["red","green","blue","alpha"].filter((e=>!a.includes(e)));t.innerHTML=`\n                    <h3>✅ Packed Result</h3>\n                    <dl>\n                        <dt>Dimensions:</dt>\n                        <dd>${e.width} × ${e.height}px</dd>\n                        <dt>Loaded channels:</dt>\n                        <dd>${a.join(", ")||"None"}</dd>\n                        ${n.length>0?`\n                            <dt>Filled channels:</dt>\n                            <dd>${n.join(", ")}</dd>\n                        `:""}\n                    </dl>\n                `,t.appendChild(e)}async downloadResult(){if(this.#t)try{const e=await new Promise((e=>{this.#t.toBlob(e,"image/png")})),t=(new Date).toISOString().replace(/[:.]/g,"-").slice(0,-5),a=`packed_${Array.from(this.#e.keys()).join("_")}_${t}.png`,n=URL.createObjectURL(e),i=document.createElement("a");i.href=n,i.download=a,i.click(),setTimeout((()=>URL.revokeObjectURL(n)),1e3),this.showNotification("Download started!","success")}catch(e){this.showNotification("Download failed","error")}else this.showNotification("No result available","warning")}showNotification(e,t="info"){document.querySelectorAll('[role="alert"]').forEach((e=>e.remove()));const a=document.createElement("div");a.setAttribute("role","alert"),a.setAttribute("data-type",t),a.textContent=e,document.body.appendChild(a),setTimeout((()=>{a.style.animation="slideIn 0.3s ease reverse",setTimeout((()=>a.remove()),300)}),5e3),a.addEventListener("click",(()=>{a.style.animation="slideIn 0.3s ease reverse",setTimeout((()=>a.remove()),300)}))}formatFileSize(e){const t=["B","KB","MB","GB"];let a=e,n=0;for(;a>=1024&&n<t.length-1;)a/=1024,n++;return`${a.toFixed(2)} ${t[n]}`}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>new RGBAChannelPacker)):new RGBAChannelPacker;
